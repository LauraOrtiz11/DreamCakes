@model DreamCakes.Dtos.Admin.AdminProductDto

<div class="row mt-4" id="promotionSection">
    <div class="col-md-12">
        <h4>Promociones Vinculadas</h4>

        @if (Model?.ProductPromotion?.CurrentPromotions != null && Model.ProductPromotion.CurrentPromotions.Any())
        {
            <div class="table-responsive">
                <table class="table table-bordered">
                    <thead>
                        <tr>
                            <th>Nombre</th>
                            <th>Descuento</th>
                            <th>Fecha Inicio</th>
                            <th>Fecha Fin</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var promo in Model.ProductPromotion.CurrentPromotions)
                        {
                            <tr>
                                <td>@promo.NameProm</td>
                                <td>@promo.DiscountPer.ToString("0.0")%</td>
                                <td>@promo.StartDate.ToString("dd/MM/yyyy")</td>
                                <td>@promo.EndDate.ToString("dd/MM/yyyy")</td>
                                <td>
                                    <button class="btn btn-danger btn-sm"
                                            onclick="removePromotion(@Model.ID_Product, @promo.ID_Prom)">
                                        <i class="fas fa-trash"></i> Eliminar
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <p class="text-muted">Este producto no tiene promociones vinculadas.</p>
        }

        <!-- Formulario para agregar nuevas promociones -->
        <div class="card mt-3">
            <div class="card-header">
                <h5 class="mb-0">Vincular Nueva Promoción</h5>
            </div>
            <div class="card-body">
                @using (Html.BeginForm("AddPromotion", "AdminProduct", FormMethod.Post))
                {
                    @Html.AntiForgeryToken()
                    @Html.Hidden("ProductId", Model.ID_Product)

                    <div class="form-group">
                        <label>Seleccionar Promoción Activa</label>
                        <select name="PromotionId" class="form-control" required>
                            <option value="">-- Seleccione una promoción --</option>
                            @foreach (var promo in Model.ProductPromotion.AvailablePromotions)
                            {
                                <option value="@promo.ID_Prom">
                                    @promo.NameProm - @promo.DiscountPer.ToString("0.0")%
                                    (Del @promo.StartDate.ToString("dd/MM/yyyy") al @promo.EndDate.ToString("dd/MM/yyyy"))
                                </option>
                            }
                        </select>
                    </div>

                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-link"></i> Vincular Promoción
                    </button>
                }
            </div>
        </div>
    </div>
</div>
@section Scripts {
    <script>
        $(document).ready(function () {
            // Cargar promociones al inicio
            loadPromotions();

            // Función para eliminar promoción
            window.removePromotion = function (productId, promotionId) {
                if (confirm('¿Está seguro que desea eliminar esta promoción del producto?')) {
                    $.post('@Url.Action("RemovePromotion", "AdminProduct")', {
                        productId: productId,
                        promotionId: promotionId
                    }, function (response) {
                        if (response.success) {
                            showToast('success', response.message);
                            loadPromotions();
                        } else {
                            showToast('error', response.message);
                        }
                    }).fail(function () {
                        showToast('error', 'Error al conectar con el servidor');
                    });
                }
            }

            // Función para recargar la sección de promociones
            function loadPromotions() {
                $.get('@Url.Action("GetPromotionsPartial", "AdminProduct", new { id = Model.ID_Product })', function (html) {
                    $("#promotionSection").html(html);
                }).fail(function () {
                    $("#promotionSection").html('<p class="text-danger">Error al cargar promociones.</p>');
                });
            }

            // Mostrar notificaciones toast
            function showToast(type, message) {
                const toast = `<div class="toast align-items-center text-white bg-${type} border-0" role="alert">
                                <div class="d-flex">
                                    <div class="toast-body">${message}</div>
                                    <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
                                </div>
                              </div>`;

                $("#toastContainer").html(toast);
                $(".toast").toast({ delay: 3000 }).toast('show');
            }
        });
    </script>
}