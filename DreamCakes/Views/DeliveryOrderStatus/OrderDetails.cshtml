@model DreamCakes.Dtos.Delivery.DeliveryOrderDetailDto
@{
    var availableStatuses = ViewBag.AvailableStatuses as List<DreamCakes.Dtos.Delivery.DeliveryOrderStatusDto>;
}

<div id="toast-container" class="toast-top-right"></div>
<div class="pc-container mt-4">
    <div class="pc-card">
        <div class="pc-card-header">
            <h3 class="pc-title">Detalles del Pedido #@Model.OrderId</h3>
            <span id="currentStatusBadge" class="pc-badge pc-badge-light">@Model.Status</span>
        </div>

        <div class="pc-card-body">
            <div class="pc-row">
                <div class="pc-col">
                    <h5 class="pc-subtitle">Información del Cliente</h5>
                    <p><strong>Nombre:</strong> @Model.CustomerName</p>
                    <p><strong>Dirección de entrega:</strong> @Model.DeliveryAddress</p>
                </div>
                <div class="pc-col">
                    <h5 class="pc-subtitle">Información del Pedido</h5>
                    <p><strong>Fecha:</strong> @Model.OrderDate.ToString("g")</p>
                    <p><strong>Hora estimada:</strong> @Model.EstimatedDelivery.ToString("g")</p>
                    <p><strong>Total:</strong> @Model.TotalAmount.ToString("C")</p>
                </div>
            </div>

            <h5 class="pc-products-title mt-4">Productos</h5>
            <table class="pc-table">
                <thead>
                    <tr>
                        <th>Producto</th>
                        <th>Cantidad</th>
                        <th>Precio Unitario</th>
                        <th>Subtotal</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model.Items)
                    {
                        <tr>
                            <td>@item.ProductName</td>
                            <td>@item.Quantity</td>
                            <td>@item.UnitPrice.ToString("C")</td>
                            <td>@item.Subtotal.ToString("C")</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <div class="pc-card-footer">
            <div class="pc-footer-actions">
                <a href="@Url.Action("AssignedOrders", "DeliveryOrder")" class="pc-btn pc-btn-secondary">
                    <i class="fas fa-arrow-left"></i> Volver
                </a>

                @if (availableStatuses != null && availableStatuses.Any())
                {
                    <div class="pc-dropdown">
                        <button class="pc-btn pc-btn-primary pc-dropdown-toggle" type="button"
                                id="statusDropdown" data-toggle="dropdown"
                                aria-haspopup="true" aria-expanded="false">
                            Actualizar Estado
                        </button>
                        <div class="pc-dropdown-menu" aria-labelledby="statusDropdown">
                            @foreach (var status in availableStatuses)
                            {
                                <a class="pc-dropdown-item pc-update-status" href="#"
                                   data-status-id="@status.StatusId"
                                   data-status-name="@status.StatusName">
                                    @status.StatusName
                                </a>
                            }
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            $('.pc-update-status').click(function(e) {
                e.preventDefault();
                var newStatusId = $(this).data('status-id');
                var statusName = $(this).text().trim();

                if (confirm(`¿Confirmas cambiar el estado a "${statusName}"?`)) {
                    $.ajax({
                        url: '@Url.Action("UpdateStatus", "DeliveryOrderStatus")',
                        type: 'POST',
                        data: {
                            orderId: @Model.OrderId,
                            newStatusId: newStatusId,
                            __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                        },
                        success: function(response) {
                            if (response.success) {
                                // Actualizar el badge de estado visualmente
                                $('#currentStatusBadge')
                                    .removeClass('pc-badge-warning pc-badge-info pc-badge-success')
                                    .addClass(getStatusBadgeClass(response.newStatusId))
                                    .text(response.newStatus);

                                // Mostrar notificación Toastr
                                toastr.success(response.message, 'Éxito', {
                                    timeOut: 3000,
                                    positionClass: 'toast-top-right'
                                });

                                // Deshabilitar el dropdown temporalmente
                                $('#statusDropdown').prop('disabled', true);
                                setTimeout(function() {
                                    $('#statusDropdown').prop('disabled', false);
                                }, 2000);
                            } else {
                                toastr.error(response.message, 'Error', {
                                    timeOut: 5000,
                                    positionClass: 'toast-top-right'
                                });
                            }
                        },
                        error: function() {
                            toastr.error('Error al comunicarse con el servidor', 'Error', {
                                timeOut: 5000,
                                positionClass: 'toast-top-right'
                            });
                        }
                    });
                }
            });

            // Función para determinar la clase CSS del badge según el estado
            function getStatusBadgeClass(statusId) {
                switch(statusId) {
                    case 3: return 'pc-badge-warning'; // Preparado
                    case 4: return 'pc-badge-info';     // En camino
                    case 5: return 'pc-badge-success';  // Entregado
                    default: return 'pc-badge-secondary';
                }
            }
        });
    </script>
}
